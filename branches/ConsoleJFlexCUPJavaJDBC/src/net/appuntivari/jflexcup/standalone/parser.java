package net.appuntivari.jflexcup.standalone;

//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu May 23 09:21:23 CEST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Thu May 23 09:21:23 CEST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\005\003\000\002\005" +
    "\004\000\002\006\017\000\002\006\021\000\002\006\013" +
    "\000\002\006\011\000\002\007\004\000\002\007\003\000" +
    "\002\007\002\000\002\010\006\000\002\010\005\000\002" +
    "\010\004\000\002\010\003\000\002\010\002\000\002\011" +
    "\004\000\002\011\003\000\002\011\002\000\002\012\004" +
    "\000\002\012\003\000\002\012\002\000\002\013\004\000" +
    "\002\013\003\000\002\013\002\000\002\014\004\000\002" +
    "\014\003\000\002\014\002\000\002\015\003\000\002\015" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\022\003\014\013\007\014\010\015\017\016" +
    "\011\020\013\021\016\022\005\001\002\000\004\002\000" +
    "\001\002\000\004\017\106\001\002\000\012\002\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\001\002\000\006\003\102\012\101" +
    "\001\002\000\006\003\075\012\074\001\002\000\006\003" +
    "\070\012\067\001\002\000\012\002\uffff\020\013\021\016" +
    "\022\005\001\002\000\004\017\050\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\047\001\002\000\004\017\020" +
    "\001\002\000\004\002\ufffe\001\002\000\030\002\uffeb\004" +
    "\022\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\001\002\000\026\002\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\024\020\uffe6" +
    "\021\uffe6\022\uffe6\001\002\000\030\002\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\017\023\020\uffec" +
    "\021\uffec\022\uffec\001\002\000\026\002\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\020\uffed\021\uffed" +
    "\022\uffed\001\002\000\026\002\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\017\044\020\uffe7\021\uffe7\022\uffe7" +
    "\001\002\000\024\002\uffe3\005\uffe3\006\uffe3\007\026\010" +
    "\uffe3\011\uffe3\020\uffe3\021\uffe3\022\uffe3\001\002\000\024" +
    "\002\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\017\043\020" +
    "\uffe4\021\uffe4\022\uffe4\001\002\000\022\002\uffe0\005\uffe0" +
    "\006\uffe0\010\030\011\uffe0\020\uffe0\021\uffe0\022\uffe0\001" +
    "\002\000\022\002\uffe1\005\uffe1\006\uffe1\011\uffe1\017\042" +
    "\020\uffe1\021\uffe1\022\uffe1\001\002\000\020\002\uffdd\005" +
    "\uffdd\006\uffdd\011\033\020\uffdd\021\uffdd\022\uffdd\001\002" +
    "\000\016\002\uffda\005\uffda\006\035\020\uffda\021\uffda\022" +
    "\uffda\001\002\000\020\002\uffde\005\uffde\006\uffde\017\034" +
    "\020\uffde\021\uffde\022\uffde\001\002\000\016\002\uffdf\005" +
    "\uffdf\006\uffdf\020\uffdf\021\uffdf\022\uffdf\001\002\000\016" +
    "\002\uffdb\005\uffdb\017\041\020\uffdb\021\uffdb\022\uffdb\001" +
    "\002\000\014\002\uffd8\005\037\020\uffd8\021\uffd8\022\uffd8" +
    "\001\002\000\012\002\uffd9\020\uffd9\021\uffd9\022\uffd9\001" +
    "\002\000\012\002\uffef\020\uffef\021\uffef\022\uffef\001\002" +
    "\000\014\002\uffdc\005\uffdc\020\uffdc\021\uffdc\022\uffdc\001" +
    "\002\000\020\002\uffe2\005\uffe2\006\uffe2\011\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\001\002\000\022\002\uffe5\005\uffe5\006" +
    "\uffe5\010\uffe5\011\uffe5\020\uffe5\021\uffe5\022\uffe5\001\002" +
    "\000\026\002\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\045\020\uffe8\021\uffe8\022\uffe8\001\002\000\026" +
    "\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\017" +
    "\046\020\uffe9\021\uffe9\022\uffe9\001\002\000\024\002\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\020\uffea\021" +
    "\uffea\022\uffea\001\002\000\004\002\001\001\002\000\006" +
    "\004\022\012\uffeb\001\002\000\004\012\052\001\002\000" +
    "\004\017\053\001\002\000\006\007\uffe6\012\024\001\002" +
    "\000\004\007\055\001\002\000\004\017\056\001\002\000" +
    "\004\010\057\001\002\000\004\017\060\001\002\000\004" +
    "\011\061\001\002\000\004\017\062\001\002\000\004\006" +
    "\063\001\002\000\014\002\ufff1\017\064\020\ufff1\021\ufff1" +
    "\022\ufff1\001\002\000\014\002\uffd8\005\037\020\uffd8\021" +
    "\uffd8\022\uffd8\001\002\000\012\002\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\001\002\000\012\002\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\001\002\000\006\003\073\012\072\001\002\000\004" +
    "\012\071\001\002\000\004\002\ufff6\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\ufff9\001\002\000\006\003\100" +
    "\012\077\001\002\000\004\012\076\001\002\000\004\002" +
    "\ufff4\001\002\000\004\002\ufffa\001\002\000\004\002\ufff7" +
    "\001\002\000\006\003\105\012\104\001\002\000\004\012" +
    "\103\001\002\000\004\002\ufff5\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\ufff8\001\002\000\004\004\107\001" +
    "\002\000\004\017\110\001\002\000\004\012\111\001\002" +
    "\000\004\017\112\001\002\000\004\012\113\001\002\000" +
    "\012\002\uffee\020\uffee\021\uffee\022\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\012\003\014\004\003\005\011\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\020\001\001\000\004\010\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\026\001\001\000\002\001\001\000\004\012\030\001\001" +
    "\000\002\001\001\000\004\013\031\001\001\000\004\014" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	System.out.println("PARSERRIZZO...");

    }


	public static int flagLogin = 0;
	public static int flagLogout = 0;
	public int codCom = -1;
	public int dataVuota = 0;
	public int isCorrect = 0; //a livello di istanza NON di classe.
	public Comando comandoDigitato = null; //a livello di istanza NON di classe.
		
	//ritorna il valore semantico che cè all'interno dello stack ad una certa posizione
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	int flagDebug = 0;
	private void stampa(String s){ 
        if (flagDebug == 1){
            System.out.println(s);           
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // oras ::= 
            {
              String RESULT = null;
		RESULT = new String("none");
              CUP$parser$result = new java_cup.runtime.Symbol(11/*oras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // oras ::= ORA 
            {
              String RESULT = null;
		int oraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ora = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(ora);
              CUP$parser$result = new java_cup.runtime.Symbol(11/*oras*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaziones ::= 
            {
              String RESULT = null;
		RESULT = new String("none");
              CUP$parser$result = new java_cup.runtime.Symbol(10/*operaziones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaziones ::= OPERAZIONE 
            {
              String RESULT = null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(oper);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*operaziones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaziones ::= OPERAZIONE SEP 
            {
              String RESULT = null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(oper);
              CUP$parser$result = new java_cup.runtime.Symbol(10/*operaziones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // indirizzos ::= 
            {
              String RESULT = null;
		RESULT = new String("none");
              CUP$parser$result = new java_cup.runtime.Symbol(9/*indirizzos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // indirizzos ::= INDIRIZZO 
            {
              String RESULT = null;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(ind);
              CUP$parser$result = new java_cup.runtime.Symbol(9/*indirizzos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // indirizzos ::= INDIRIZZO SEP 
            {
              String RESULT = null;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(ind);
              CUP$parser$result = new java_cup.runtime.Symbol(9/*indirizzos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // seziones ::= 
            {
              String RESULT = null;
		RESULT = new String("none");
              CUP$parser$result = new java_cup.runtime.Symbol(8/*seziones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seziones ::= SEZIONE 
            {
              String RESULT = null;
		int sezleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sezright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sez = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(sez);
              CUP$parser$result = new java_cup.runtime.Symbol(8/*seziones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seziones ::= SEZIONE SEP 
            {
              String RESULT = null;
		int sezleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sezright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sez = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(sez);
              CUP$parser$result = new java_cup.runtime.Symbol(8/*seziones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // clases ::= 
            {
              String RESULT = null;
		RESULT = new String("none");
              CUP$parser$result = new java_cup.runtime.Symbol(7/*clases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // clases ::= CLASSE 
            {
              String RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(cl);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*clases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // clases ::= CLASSE SEP 
            {
              String RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(cl);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*clases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // strs ::= 
            {
              String RESULT = null;
		RESULT = new String("none none");
              CUP$parser$result = new java_cup.runtime.Symbol(6/*strs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // strs ::= STRINGA 
            {
              String RESULT = null;
		int stringaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stringaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String stringa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(""+stringa+" none");
              CUP$parser$result = new java_cup.runtime.Symbol(6/*strs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // strs ::= STRINGA SEP 
            {
              String RESULT = null;
		int stringaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String stringa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(""+stringa+" none");
              CUP$parser$result = new java_cup.runtime.Symbol(6/*strs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // strs ::= STRINGA SEP STRINGA 
            {
              String RESULT = null;
		int stringa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringa1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stringa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String stringa2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(""+stringa1+" "+stringa2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*strs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // strs ::= STRINGA SEP STRINGA SEP 
            {
              String RESULT = null;
		int stringa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringa1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stringa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stringa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String stringa2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(""+stringa1+" "+stringa2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*strs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datas ::= 
            {
              String RESULT = null;
		 
				
			
					GregorianCalendar gc = new GregorianCalendar();
					int anno = gc.get(Calendar.YEAR);
					int mese = gc.get(Calendar.MONTH) + 1;
					int giorno = gc.get(Calendar.DATE);

					System.out.println("data assente, quindi OGGI: "+giorno + "/" + mese + "/" + anno); 
					RESULT = new String( (""+giorno + "/" + mese + "/" + anno) );
					
					parser.dataVuota = 1;
					
				
			
              CUP$parser$result = new java_cup.runtime.Symbol(5/*datas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datas ::= DATA 
            {
              String RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new String(dt);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*datas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datas ::= DATA SEP 
            {
              String RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new String(dt);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*datas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comando ::= DUE SEP DATA SEP STRINGA SEP STRINGA 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cognleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cognright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cogn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String nome = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
																	//DATA
																	stampa("debug: "+dt);
																	//COGNOME
																	stampa("debug: "+cogn);
																	//NOME
																	stampa("debug: "+nome);
																	
																	
																	
																	parser.isCorrect = 1;
																	parser.comandoDigitato = new Comando(new String("DELETE"),
																											new String(dt),
																											new String(cogn),
																											new String(nome));
																	
																	stampa("COMANDO DUE\n\n"); 
																
              CUP$parser$result = new java_cup.runtime.Symbol(4/*comando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comando ::= UNO SEP datas strs clases seziones indirizzos operaziones oras 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stringaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stringaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String stringa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sezleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sezright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String sez = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ora = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 					
																					//DATA
																					stampa("debug: "+dt);
																					
																					//COGNOME eo NOME
																					stampa("debug: "+stringa);																					
																					String[] temp;
																					temp = stringa.split(" ");
																					
																					//CLASSE
																					stampa("debug: "+cla);
																					//SEZIONE
																					stampa("debug: "+sez);
																					//INDIRIZZO
																					stampa("debug: "+ind);
																					//OPERAZIONE
																					stampa("debug: "+oper);
																					//ORA
																					stampa("debug: "+ora);
																					
																					
																					parser.isCorrect = 1;
																					parser.comandoDigitato = new Comando(new String("SELECT"),
																																		new String(dt),
																																		new String(temp[0].toString()),
																																		new String(temp[1].toString()),
																																		new String(cla),
																																		new String(sez),
																																		new String(ind),
																																		new String(oper),
																																		new String(ora)
																																		);
																					
																					parser.codCom = 1;
																					stampa("COMANDO UNO\n\n");
																					
              CUP$parser$result = new java_cup.runtime.Symbol(4/*comando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comando ::= ZERO SEP datas STRINGA SEP strs CLASSE SEP SEZIONE SEP INDIRIZZO SEP OPERAZIONE SEP oras 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int cognleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int cognright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String cogn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nome = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sezleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sezright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String sez = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ora = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
																									//DATA
																									stampa("debug: "+dt);
																									//COGNOME
																									stampa("debug: "+cogn);
																									//NOME
																									stampa("debug: "+nome);
																									//CLASSE
																									stampa("debug: "+cla);
																									//SEZIONE
																									stampa("debug: "+sez);
																									//INDIRIZZO
																									stampa("debug: "+ind);
																									//OPERAZIONE
																									stampa("debug: "+oper);
																									//ORA
																									stampa("debug: "+ora);
																									
																									parser.isCorrect = 1;
																									parser.comandoDigitato = new Comando(new String("INSERT"),
																																		new String(dt),
																																		new String(cogn),
																																		new String(nome),
																																		new String(cla),
																																		new String(sez),
																																		new String(ind),
																																		new String(oper),
																																		new String(ora)
																																		);
																									parser.codCom = 0;
																									stampa("COMANDO ZERO\n\n");
																									
              CUP$parser$result = new java_cup.runtime.Symbol(4/*comando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando ::= ZERO SEP datas STRINGA SEP strs CLASSE SEP SEZIONE SEP INDIRIZZO SEP OPERAZIONE 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cognleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cognright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String cogn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nomeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nomeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String nome = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sezleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sezright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String sez = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int indleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
																									GregorianCalendar gc = new GregorianCalendar();
																									int ore = gc.get(Calendar.HOUR_OF_DAY);
																									int min = gc.get(Calendar.MINUTE);
																									String orario = new String(""+ore+":"+min);
																									
																									//DATA
																									stampa("debug: "+dt);
																									//COGNOME
																									stampa("debug: "+cogn);
																									//NOME
																									stampa("debug: "+nome);
																									//CLASSE
																									stampa("debug: "+cla);
																									//SEZIONE
																									stampa("debug: "+sez);
																									//INDIRIZZO
																									stampa("debug: "+ind);
																									//OPERAZIONE
																									stampa("debug: "+oper);
																									//ORA
																									stampa("debug: ora assente, quindi OGGI: "+ore + ":" + min); 

																									parser.isCorrect = 1;
																									parser.comandoDigitato = new Comando(new String("INSERT"),
																																		new String(dt),
																																		new String(cogn),
																																		new String(nome),
																																		new String(cla),
																																		new String(sez),
																																		new String(ind),
																																		new String(oper),
																																		new String(orario)
																																		);
																									parser.codCom = 0;
																									stampa("COMANDO ZERO\n\n"); 
																									
              CUP$parser$result = new java_cup.runtime.Symbol(4/*comando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comandi ::= comandi comando 
            {
              Object RESULT = null;
		
									if(parser.codCom == 1 && parser.dataVuota == 1){
											parser.comandoDigitato.data = "none";
									}
			
								
              CUP$parser$result = new java_cup.runtime.Symbol(3/*comandi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comandi ::= comando 
            {
              Object RESULT = null;
		 
						if(parser.codCom == 1 && parser.dataVuota == 1){
								parser.comandoDigitato.data = "none";
						}

					
              CUP$parser$result = new java_cup.runtime.Symbol(3/*comandi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // logins ::= U error STRINGA 
            {
              Object RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 stampa("debug: Manca l'user"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // logins ::= USER error STRINGA 
            {
              Object RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 stampa("debug: Manca l'user"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // logins ::= LOGIN error STRINGA 
            {
              Object RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 stampa("debug: Manca l'user"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // logins ::= U STRINGA error 
            {
              Object RESULT = null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 stampa("debug: Manca la password"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // logins ::= USER STRINGA error 
            {
              Object RESULT = null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 stampa("debug: Manca la password"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // logins ::= LOGIN STRINGA error 
            {
              Object RESULT = null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 stampa("debug: Manca la password"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // logins ::= U STRINGA STRINGA 
            {
              Object RESULT = null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
										
										String user = new String(ut);
										String pass = new String(ps);
										if( user.equals("sebastiano") && pass.equals("password") ){
											parser.flagLogin = 1;
											stampa("debug: Autenticazione con U.");
										}else if(user.equals("francesco") && pass.equals("password") ){
											parser.flagLogin = 1;
											stampa("debug: Autenticazione con U.");
										}
										
										
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // logins ::= USER STRINGA STRINGA 
            {
              Object RESULT = null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			
										String user = new String(ut);
										String pass = new String(ps);
										if( user.equals("sebastiano") && pass.equals("password") ){
											parser.flagLogin = 1;
											stampa("debug: Autenticazione con USER.");
										}else if(user.equals("francesco") && pass.equals("password") ){
											parser.flagLogin = 1;
											stampa("debug: Autenticazione con USER.");
										}

										
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // logins ::= LOGIN STRINGA STRINGA 
            {
              Object RESULT = null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
											
										String user = new String(ut);
										String pass = new String(ps);
										if( user.equals("sebastiano") && pass.equals("password") ){
											parser.flagLogin = 1;
											stampa("debug: Autenticazione con LOGIN.");
										}else if(user.equals("francesco") && pass.equals("password") ){
											parser.flagLogin = 1;
											stampa("debug: Autenticazione con LOGIN.");
										}
										
										
              CUP$parser$result = new java_cup.runtime.Symbol(2/*logins*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // progr ::= error 
            {
              Object RESULT = null;
		 System.out.println("Controllare la sintassi: u <user> <password>, User <user> <password>, Login <user> <password> oppure 0# | 1# | 2#"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*progr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // progr ::= LOGOUT 
            {
              Object RESULT = null;
		 
				parser.flagLogin = 0;
				parser.flagLogout = 1;
				stampa("OK, FINE DEL PARSER !!!"); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*progr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // progr ::= comandi 
            {
              Object RESULT = null;
		 stampa("OK, FINE DEL PARSER !!!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*progr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // progr ::= logins 
            {
              Object RESULT = null;
		 stampa("OK, FINE PARSER!"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*progr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= progr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

